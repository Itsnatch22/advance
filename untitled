```tsx
/*
Employer Dashboard Scaffold
Next.js (app router) + Tailwind CSS + Recharts
No dark theme (per request)

Drop these files into your project. Adjust imports to shadcn components where you have them.
This scaffold is intentionally minimal & modular:
- app/(dashboard)/employer/layout.tsx
- app/(dashboard)/employer/page.tsx
- components/dashboard/Sidebar.tsx
- components/dashboard/Navbar.tsx
- components/dashboard/StatCard.tsx
- components/charts/BarChartComponent.tsx

Install:
npm i lucide-react recharts

Swap plain components for shadcn variants if you prefer (e.g., Card, Button etc).
*/

/* ============================
   File: components/dashboard/Sidebar.tsx
   ============================ */
"use client";
import Link from "next/link";
import Image from "next/image";
import { Users, FileText, DollarSign, BarChart2, Settings, LogOut } from "lucide-react";

export default function Sidebar() {
  return (
    <aside className="w-72 bg-white border-r border-gray-200 p-6">
      <div className="flex items-center gap-3 mb-8">
        <div className="w-10 h-10 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center">
          {/* swap for <Image src="/logo.png" ... /> if you have a logo */}
          <span className="font-bold text-green-700">KA</span>
        </div>
        <div>
          <h3 className="font-semibold text-gray-900">Acme Corp</h3>
          <p className="text-xs text-gray-500">Employer account</p>
        </div>
      </div>

      <nav className="space-y-1">
        <NavItem href="#" icon={<BarChart2 className="w-4 h-4 text-green-600" />}>Dashboard Overview</NavItem>
        <NavItem href="/employer/employees" icon={<Users className="w-4 h-4" />}>Employee Management</NavItem>
        <NavItem href="/employer/advance-requests" icon={<FileText className="w-4 h-4" />}>Advance Requests</NavItem>
        <NavItem href="/employer/payroll" icon={<DollarSign className="w-4 h-4" />}>Payroll</NavItem>
        <NavItem href="/employer/reports" icon={<BarChart2 className="w-4 h-4" />}>Reports</NavItem>
        <NavItem href="/employer/settings" icon={<Settings className="w-4 h-4" />}>Settings</NavItem>
      </nav>

      <div className="mt-auto pt-6">
        <button className="w-full flex items-center gap-2 justify-center px-3 py-2 rounded-md border text-sm text-gray-700 hover:bg-gray-50">
          <LogOut className="w-4 h-4" /> Logout
        </button>
      </div>
    </aside>
  );
}

function NavItem({ href, children, icon }: { href: string; children: React.ReactNode; icon?: React.ReactNode; }) {
  return (
    <Link href={href} className="flex items-center gap-3 px-3 py-2 rounded-md hover:bg-gray-50 text-gray-700">
      <span>{icon}</span>
      <span className="text-sm">{children}</span>
    </Link>
  );
}

/* ============================
   File: components/dashboard/Navbar.tsx
   ============================ */
"use client";
import Image from "next/image";
import { Search } from "lucide-react";

export default function Navbar({ companyName = "Acme Corp" }: { companyName?: string }) {
  return (
    <header className="flex items-center justify-between mb-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">{companyName} — Employer Dashboard</h1>
        <p className="text-sm text-gray-600">Overview of advances, employees and payouts</p>
      </div>

      <div className="flex items-center gap-4">
        <div className="relative">
          <input
            className="pl-9 pr-3 py-2 rounded-lg border border-gray-200 text-sm"
            placeholder="Search employees, ID, requests..."
          />
          <span className="absolute left-2 top-2 text-gray-400"><Search className="w-4 h-4" /></span>
        </div>

        <div className="flex items-center gap-3">
          {/* Replace with NextAuth user image */}
          <div className="w-10 h-10 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center">
            <Image src="/avatar.png" alt="avatar" width={40} height={40} />
          </div>
        </div>
      </div>
    </header>
  );
}

/* ============================
   File: components/dashboard/StatCard.tsx
   ============================ */
"use client";
export default function StatCard({ title, value, subtitle }: { title: string; value: string | number; subtitle?: string; }) {
  return (
    <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-100">
      <div className="text-sm text-gray-500">{title}</div>
      <div className="mt-2 text-2xl font-semibold text-gray-900">{value}</div>
      {subtitle && <div className="mt-1 text-xs text-gray-500">{subtitle}</div>}
    </div>
  );
}

/* ============================
   File: components/charts/BarChartComponent.tsx
   ============================ */
"use client";
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, CartesianGrid } from "recharts";

export default function BarChartComponent({ data, dataKey = "value", name = "Value" }: { data: any[]; dataKey?: string; name?: string; }) {
  return (
    <div className="w-full h-56">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="month" />
          <YAxis />
          <Tooltip formatter={(value: any) => `KES ${value}`} />
          <Bar dataKey={dataKey} fill="#16a34a" radius={[4, 4, 0, 0]} />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
}

/* ============================
   File: app/(dashboard)/employer/layout.tsx
   ============================ */
import React from "react";
import Sidebar from "@/components/dashboard/Sidebar";
import Navbar from "@/components/dashboard/Navbar";

export const metadata = {
  title: "Employer — KaziAdvance",
};

export default function EmployerLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen flex bg-gray-50">
      <Sidebar />
      <main className="flex-1 p-6">
        <Navbar />
        <div>{children}</div>
      </main>
    </div>
  );
}

/* ============================
   File: app/(dashboard)/employer/page.tsx
   ============================ */
"use client";
import { useState } from "react";
import StatCard from "@/components/dashboard/StatCard";
import BarChartComponent from "@/components/charts/BarChartComponent";

const EMPLOYEES = [
  { id: "E-001", name: "Alice Mwanje", dept: "Sales", salary: 45000, outstanding: 12000 },
  { id: "E-002", name: "Ben Mwangi", dept: "Ops", salary: 38000, outstanding: 0 },
  { id: "E-003", name: "Cecilia Otieno", dept: "HR", salary: 30000, outstanding: 5000 },
];

const REQUESTS = [
  { id: "R-1001", employee: "Alice Mwanje", amount: 8000, status: "Pending", date: "2025-10-12" },
  { id: "R-1002", employee: "Cecilia Otieno", amount: 5000, status: "Approved", date: "2025-10-11" },
];

const disbursementData = [
  { month: "Jul", value: 120000 },
  { month: "Aug", value: 95000 },
  { month: "Sep", value: 143000 },
  { month: "Oct", value: 110000 },
];

export default function EmployerPage() {
  const [employees, setEmployees] = useState(EMPLOYEES);
  const [requests, setRequests] = useState(REQUESTS);
  const [search, setSearch] = useState("");

  const filteredEmployees = employees.filter(e =>
    e.name.toLowerCase().includes(search.toLowerCase()) || e.id.toLowerCase().includes(search.toLowerCase())
  );

  function approveRequest(id: string) {
    setRequests(prev => prev.map(r => (r.id === id ? { ...r, status: "Approved" } : r)));
    // TODO: call backend -> /api/employer/requests/:id/approve
  }

  function declineRequest(id: string) {
    setRequests(prev => prev.map(r => (r.id === id ? { ...r, status: "Declined" } : r)));
    // TODO: call backend -> /api/employer/requests/:id/decline
  }

  return (
    <div>
      {/* KPI cards */}
      <section className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <StatCard title="Total Employees" value="3,452" subtitle="Active employees" />
        <StatCard title="Pending Approvals" value={requests.filter(r => r.status === "Pending").length} subtitle="Requests awaiting action" />
        <StatCard title="Total Disbursed (30d)" value="KES 1,120,000" subtitle="Last 30 days" />
      </section>

      {/* Main grid */}
      <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-100">
            <h3 className="text-sm font-semibold text-gray-800 mb-3">Monthly Disbursements</h3>
            <BarChartComponent data={disbursementData} dataKey="value" name="Disbursed" />
          </div>

          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-100">
            <h3 className="text-sm font-semibold text-gray-800 mb-3">Employee Management</h3>
            <div className="overflow-auto">
              <table className="w-full text-sm">
                <thead className="text-left text-gray-500">
                  <tr>
                    <th className="pb-2">ID</th>
                    <th className="pb-2">Name</th>
                    <th className="pb-2">Department</th>
                    <th className="pb-2">Salary</th>
                    <th className="pb-2">Outstanding</th>
                    <th className="pb-2">Actions</th>
                  </tr>
                </thead>
                <tbody className="text-gray-700">
                  {filteredEmployees.map(e => (
                    <tr key={e.id} className="border-b last:border-b-0">
                      <td className="py-3">{e.id}</td>
                      <td className="py-3">{e.name}</td>
                      <td className="py-3">{e.dept}</td>
                      <td className="py-3">KES {e.salary.toLocaleString()}</td>
                      <td className="py-3">KES {e.outstanding.toLocaleString()}</td>
                      <td className="py-3">
                        <div className="flex gap-2">
                          <button className="px-3 py-1 text-sm rounded bg-green-600 text-white">View</button>
                          <button className="px-3 py-1 text-sm rounded border">Edit</button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Right column */}
        <aside className="space-y-6">
          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-100">
            <h3 className="text-sm font-semibold text-gray-800 mb-3">Advance Requests</h3>
            <ul className="space-y-3">
              {requests.map(r => (
                <li key={r.id} className="p-3 rounded-md border">
                  <div className="flex justify-between items-start">
                    <div>
                      <div className="flex items-center gap-2">
                        <span className="font-semibold">{r.employee}</span>
                        <span className={`text-xs px-2 py-1 rounded ${r.status === "Pending" ? "bg-yellow-100 text-yellow-800" : r.status === "Approved" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}>
                          {r.status}
                        </span>
                      </div>
                      <div className="text-sm text-gray-500">Requested {r.date} • KES {r.amount.toLocaleString()}</div>
                    </div>

                    <div className="flex flex-col gap-2">
                      {r.status === "Pending" ? (
                        <>
                          <button onClick={() => approveRequest(r.id)} className="px-3 py-1 rounded bg-green-600 text-white text-sm">Approve</button>
                          <button onClick={() => declineRequest(r.id)} className="px-3 py-1 rounded border text-sm">Decline</button>
                        </>
                      ) : (
                        <div className="text-sm text-gray-400">No actions</div>
                      )}
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          </div>

          <div className="bg-white rounded-lg shadow-sm p-4 border border-gray-100">
            <h3 className="text-sm font-semibold text-gray-800 mb-3">Bank Integrations</h3>
            <div className="text-sm text-gray-600 mb-3">Connected: <strong>Equity Bank</strong></div>
            <div className="flex flex-col gap-2">
              <button className="px-3 py-2 rounded bg-green-600 text-white text-sm">View Connection</button>
              <button className="px-3 py-2 rounded border text-sm">Reconnect / Update Credentials</button>
            </div>
          </div>
        </aside>
      </section>

      <footer className="mt-6 text-xs text-gray-500">
        <p>All actions are logged and auditable. For production, ensure bank connectors are in sandbox mode until testing is complete.</p>
      </footer>
    </div>
  );
}
```
